void swap(int* a,int *b){
    int temp= *a;
    *a=*b;
    *b=temp;
}
// applied lamuto partition
int partition(int *nums,int l,int h){
int pivot=nums[h];
int i=l-1;
for(int j=l;j<h;j++){
    if(nums[j]<pivot){
        i++;
   swap(&nums[i],&nums[j]); }
} swap(&nums[i+1],&nums[h]);
return (i+1);
}
//applied quick sort
void q_sort(int * nums,int l,int h){
    if(l<h){
        int p=partition(nums,l,h);
       q_sort(nums,l,p-1);
       q_sort(nums,p+1,h);
    }
}
int majorityElement(int* nums, int numsSize) {
    int flag=0;
    //condition when all the elements are eqaul in the array
   for(int i=0;i<numsSize;i++){
    if(nums[0]!=nums[i]) flag=1;
   }
   if(flag==0) return nums[0];
   else{
   q_sort(nums,0,numsSize-1);}
    return nums[numsSize/2];// as it is always in the middle 
}
